Some goals:
	- Have doorbells on separate pages (configurable stride?)
	- Provider can evolve the medatata header (e.g., virtio-net)
	  to balance between the needs of FreeBSD and Linux.
	  (virtio-net is good for Linux, but not for FreeBSD).
        - Virtio 1.1 vs 1.0 (while 0.95 is still around). This is a
          sign that there is a need for evolution and compatbility
          problems.
        - You can define a metadata format (e.g. virtio-net header)
          that fits the specific hardware NIC features used by a
          cloud provider.
        - Let the provider inject code to encrypt/decrypt the payload,
          together with the hardcoded key. The encrypt/decrypt routines
          can be helper functions that take as argument the OS packet
          pointer and the key.
	- Simplification of device paravirtualization. Fixed datapath
	  ABI means that you need to be backward compatible. Look at
	  virtio implementation in Linux 4.20: it needs to support
	  both split and packet ring --> complex, error prone, less
	  efficient.

TODO (driver):
        - Add vaddr field to context buffers. Needed to manipulate
          buffers from eBPF program.

TODO (qemu):
        - Replace cpu_physical_memory_[un]map() with dma_memory_[un]map()
          and the MemoryRegionCache library. This should be only necessary
          if the guest platform has an IOMMU.
          Code in virtqueue_pop() and virtqueue_push().
