Some goals:
	- Have doorbells on separate pages (configurable stride?)
	- Provider can evolve the medatata header (e.g., virtio-net)
	  to balance between the needs of FreeBSD and Linux.
	  (virtio-net is good for Linux, but not for FreeBSD).
        - Virtio 1.1 vs 1.0 (while 0.95 is still around). This is a
          sign that there is a need for evolution and compatbility
          problems.
        - You can define a metadata format (e.g. virtio-net header)
          that fits the specific hardware NIC features used by a
          cloud provider.
        - Let the provider inject code to encrypt/decrypt the payload,
          together with the hardcoded key. The encrypt/decrypt routines
          can be helper functions that take as argument the OS packet
          pointer and the key.
	- Simplification of device paravirtualization. Fixed datapath
	  ABI means that you need to be backward compatible. Look at
	  virtio implementation in Linux 4.20: it needs to support
	  both split and packet ring --> complex, error prone, less
	  efficient.
        - Change virtual switch and backend under the hood (tap,
          netmap, other).
        - Adapt to changing workloads.

TODO (driver):
	- Try to replace dma_map_single() with dma_map_page() on
	  the RX datapath ? Not sure this is relevant.
	- What if the eBPF program needs to modify the SG layout,
	  e.g., for encapsulation or encryption? This would require
	  changing the paddr/vaddr/len in the buffer descriptors,
	  and DMA mapping and unmapping... So maybe we should ask
	  the eBPF program to DMA map/unmap so, that it can do
	  that after encapsulation or encryption (i.e. once
	  the SG layout is stable).

TODO (qemu):
        - Replace cpu_physical_memory_[un]map() with dma_memory_[un]map()
          and the MemoryRegionCache library. This should be only necessary
          if the guest platform has an IOMMU.
          Code in virtqueue_pop() and virtqueue_push().
